import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

import { cp } from 'fs/promises';

const copyFunction = (files = {}) => (async () => {
  const operations = Object.entries(files)
    .map(
      ([source, target]) => cp(source, target, {
		preserveTimestamps: true,
	  })
    );
  await Promise.all(operations);
});

const copyFilePlugin = ({before, after}) => ({
  name: 'copyFile',
  async setup(build) {
    before && build.onStart(copyFunction(before));
    after && build.onEnd(copyFunction(after));
  }
});

import os from 'os';
import path from 'path';

const vaultName = 'Life';
const pluginName = 'obsidian-clean-icloud-sync';

const homeDir = os.homedir();
const vaultLocation = path.join(homeDir, 'Library/Mobile Documents/iCloud~md~obsidian/Documents', vaultName);
const pluginPath = path.join(vaultLocation, '.obsidian/plugins', pluginName);

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [copyFilePlugin({
		after: { // copy after bundling
		  'main.js': path.join(pluginPath, 'main.js'),
		  'manifest.json': path.join(pluginPath, 'manifest.json'),
		  'styles.css': path.join(pluginPath, 'styles.css'),
		}
	  })]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}